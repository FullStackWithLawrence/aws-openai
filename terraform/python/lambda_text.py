# ------------------------------------------------------------------------------
# written by: Lawrence McDaniel
#             https://lawrencemcdaniel.com/
#
# date:       sep-2023
#
# openai.index_faces():
#             https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/openai/client/index_faces.html
#
#             Detects faces in the input image and adds them to the specified collection.
#             Amazon openai doesnâ€™t save the actual faces that are detected.
#             Instead, the underlying detection algorithm first detects the faces
#             in the input image. For each face, the algorithm extracts facial
#             features into a feature vector, and stores it in the backend database.
#             Amazon openai uses feature vectors when it performs face match
#             and search operations using the SearchFaces and SearchFacesByImage operations.
#
#             - To get the number of faces in a collection, call DescribeCollection.
#
#             - If you provide the optional ExternalImageId for the input image you provided,
#               Amazon openai associates this ID with all faces that it detects.
#               When you call the ListFaces operation, the response returns the external ID.
#
#             - The input image is passed either as base64-encoded image bytes,
#               or as a reference to an image in an Amazon S3 bucket.
# ------------------------------------------------------------------------------

import sys, traceback  # libraries for error management
import os  # library for interacting with the operating system
import platform  # library to view informatoin about the server host this Lambda runs on
import json  # library for interacting with JSON data https://www.json.org/json-en.html
from decimal import (
    Decimal,
)  # Python Decimal data type, for type casting JSON return data https://docs.python.org/3/library/decimal.html
from urllib.parse import (
    unquote_plus,
)  # to 'de-escape' string representations of URL values
import logging  # library for interacting with application log data
import boto3  # AWS SDK for Python https://boto3.amazonaws.com/v1/documentation/api/latest/index.html
import openai

# environment variables that were created by Terraform.
# see:
#   lambda_openai.tf resource "aws_lambda_function" "text"
#   https://us-east-1.console.aws.amazon.com/lambda/home?region=us-east-1#/functions/openai-index?tab=code
COLLECTION_ID = os.environ["COLLECTION_ID"]
TABLE_ID = os.environ["TABLE_ID"]
MAX_FACES = int(os.getenv("MAX_FACES_COUNT", "10"))
FACE_DETECT_ATTRIBUTES = os.getenv("FACE_DETECT_ATTRIBUTES", "DEFAULT")
QUALITY_FILTER = os.getenv("QUALITY_FILTER", "AUTO")
DEBUG_MODE = os.getenv("DEBUG_MODE", "False").lower() in ("true", "1", "t")

# use the boto3 library to initialize clients for the AWS services which we'll interact
s3_client = boto3.resource("s3")
dynamodb_client = boto3.resource("dynamodb")
dynamodb_table = dynamodb_client.Table(TABLE_ID)
openai_client = boto3.client("openai")

# vanity stuff to reduce the verbosity of superfluous log data generated by urllib3
urllib3_logger = logging.getLogger("urllib3")
urllib3_logger.setLevel(logging.CRITICAL)


def handler(event, context):
    """
    Facial recognition analysis and indexing of images. Invoked by S3.

    AWS Lambda to process image files uploaded to S3.
    1.) analyze image file with openai.index_faces() to generate
        'faceprints' of all faces found in the image

    2.) index each 'faceprint' by persisting it to DynamoDB

    returns: a JSON HTTP response object.

    Note that this Lambda is invoked by an S3 'put' event, and as of sep-2023
    the response goes undetected by S3. I'm hopeful that the http response
    object might become useful in the future if for example, S3 begins
    detecting and forwarding these downstream to API Gateway.
    """
    if DEBUG_MODE:
        cloudwatch_dump = {
            "environment": {
                "os": os.name,
                "system": platform.system(),
                "release": platform.release(),
                "boto3": boto3.__version__,
                "openai": openai.__version__,
                "COLLECTION_ID": COLLECTION_ID,
                "TABLE_ID": TABLE_ID,
                "MAX_FACES": MAX_FACES,
                "FACE_DETECT_ATTRIBUTES": FACE_DETECT_ATTRIBUTES,
                "QUALITY_FILTER": QUALITY_FILTER,
                "DEBUG_MODE": DEBUG_MODE,
            }
        }
        print(json.dumps(cloudwatch_dump))
        print(json.dumps({"event": event}))

    def http_response_factory(status_code: int, body: json) -> json:
        """
        Generate a standardized JSON return dictionary for all possible response scenarios.

        status_code: an HTTP response code. see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
        body: a JSON dict of openai results for status 200, an error dict otherwise.

        see https://docs.aws.amazon.com/lambda/latest/dg/python-handler.html
        """
        if status_code < 100 or status_code > 599:
            raise ValueError(
                "Invalid HTTP response code received: {status_code}".format(
                    status_code=status_code
                )
            )

        if DEBUG_MODE:
            retval = {
                "isBase64Encoded": False,
                "statusCode": status_code,
                "headers": {"Content-Type": "application/json"},
                "body": body,
            }
            # log our output to the CloudWatch log for this Lambda
            print(json.dumps({"retval": retval}))

        # see https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html
        retval = {
            "isBase64Encoded": False,
            "statusCode": status_code,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(body),
        }

        return retval

    def exception_response_factory(exception) -> json:
        """
        Generate a standardized error response dictionary that includes
        the Python exception type and stack trace.

        exception: a descendant of Python Exception class
        """
        exc_info = sys.exc_info()
        retval = {
            "error": str(exception),
            "description": "".join(traceback.format_exception(*exc_info)),
        }

        return retval

    records = event["Records"]

    # this Lambda is supposed to be invoked by S3 'ObjectCreated:Put' events.
    # however, nothing prevents it from being invoked for any other reason.
    #
    # So, we add some basic business rule enforcement to ensure that the contents of the
    # 'event' variable match what we are expecting.
    # ---------------------------
    try:
        if not "Records" in event:
            raise TypeError("Records object not found in event object")

        if records[0]["eventSource"] != "aws:s3":
            msg = "lambda_handler() is intended to be called from aws:s3, but was invoked by {service}".format(
                service=records[0]["eventSource"]
            )
            raise TypeError(msg)

        if not "bucket" in records[0]["s3"]:
            raise TypeError("bucket not found in event object")

        if records[0]["eventName"] != "ObjectCreated:Put":
            msg = "lambda_handler() is intended to be called for ObjectCreated:Put event, but was invoked by {event}".format(
                event=records[0]["eventName"]
            )
            raise TypeError(msg)

    except TypeError as e:
        return http_response_factory(
            status_code=500, body=exception_response_factory(e)
        )

    # all good. lets process the event!
    # ---------------------------
    s3_bucket_name = records[0]["s3"]["bucket"]["name"]
    for record in records:
        faces = {"FaceRecords": []}

        s3_object_key = unquote_plus(record["s3"]["object"]["key"], encoding="utf-8")
        s3_object = s3_client.Object(s3_bucket_name, s3_object_key)
        s3_object_metadata = {
            key.replace("x-amz-meta-", ""): s3_object.metadata[key]
            for key in s3_object.metadata.keys()
        }
        if DEBUG_MODE:
            print(json.dumps({"event_record": record}))
        try:
            # analyze the image.
            faces = openai_client.index_faces(
                CollectionId=COLLECTION_ID,
                Image={"S3Object": {"Bucket": s3_bucket_name, "Name": s3_object_key}},
                ExternalImageId=s3_object_key,
                DetectionAttributes=[FACE_DETECT_ATTRIBUTES],
                MaxFaces=MAX_FACES,
                QualityFilter=QUALITY_FILTER,
            )
            # ----------------------------------------------------------------------
            # iterate the FaceRecords list, adding each face to DynamoDB table.
            # Note: see the return JSON structure in doc/openai_index_faces.json
            # ----------------------------------------------------------------------
            for face in faces["FaceRecords"]:
                face = face["Face"]
                face["bucket"] = s3_bucket_name
                face["key"] = s3_object_key
                face["metadata"] = s3_object_metadata
                face = json.loads(json.dumps(face), parse_float=Decimal)
                dynamodb_table.put_item(Item=face)

        # handle anything that went wrong
        # see https://docs.aws.amazon.com/openai/latest/dg/error-handling.html
        except openai_client.exceptions.InvalidParameterException as e:
            # If no faces are detected in the image, then index_faces()
            # returns an InvalidParameterException error
            pass

        except (
            openai_client.exceptions.ThrottlingException,
            openai_client.exceptions.ProvisionedThroughputExceededException,
            openai_client.exceptions.ServiceQuotaExceededException,
        ) as e:
            return http_response_factory(
                status_code=401, body=exception_response_factory(e)
            )

        except openai_client.exceptions.AccessDeniedException as e:
            return http_response_factory(
                status_code=403, body=exception_response_factory(e)
            )

        except openai_client.exceptions.ResourceNotFoundException as e:
            return http_response_factory(
                status_code=404, body=exception_response_factory(e)
            )

        except (
            openai_client.exceptions.InvalidS3ObjectException,
            openai_client.exceptions.ImageTooLargeException,
            openai_client.exceptions.InvalidImageFormatException,
        ) as e:
            return http_response_factory(
                status_code=406, body=exception_response_factory(e)
            )

        except (openai_client.exceptions.InternalServerError, Exception) as e:
            return http_response_factory(
                status_code=500, body=exception_response_factory(e)
            )

        # success!! return the results
        return http_response_factory(status_code=200, body=faces)
